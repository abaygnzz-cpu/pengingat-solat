<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Penghitung Kalori & Protein Harian</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: 'Inter', sans-serif; }
    .card { box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
    .fade-in { animation: fadeIn .5s ease-in; }
    @keyframes fadeIn { from {opacity:0;} to {opacity:1;} }
    #suggestions {
      position: absolute;
      background: white;
      border: 1px solid #ddd;
      width: 100%;
      z-index: 100;
      border-radius: 8px;
      max-height: 160px;
      overflow-y: auto;
    }
    #suggestions div {
      padding: 6px 10px;
      cursor: pointer;
    }
    #suggestions div:hover {
      background-color: #f3f4f6;
    }
  </style>
</head>
<body class="bg-gradient-to-b from-gray-100 to-gray-200 text-gray-900 min-h-screen">

  <div class="max-w-3xl mx-auto mt-8 bg-white p-6 rounded-2xl card fade-in">
    <h1 class="text-2xl font-bold text-center mb-6 text-blue-700">üç± Penghitung Kalori & Protein Harian</h1>

    <!-- Bagian Data Pengguna -->
    <section class="border-b pb-4 mb-5">
      <h2 class="text-lg font-semibold mb-3">üìã Data Pengguna</h2>
      <div class="grid grid-cols-2 gap-3">
        <select id="gender" class="border p-2 rounded">
          <option value="">Jenis Kelamin</option>
          <option value="pria">Pria</option>
          <option value="wanita">Wanita</option>
        </select>
        <input id="age" type="number" placeholder="Usia (tahun)" class="border p-2 rounded">
        <input id="weight" type="number" placeholder="Berat (kg)" class="border p-2 rounded">
        <input id="height" type="number" placeholder="Tinggi (cm)" class="border p-2 rounded">
      </div>

      <div class="mt-3">
        <select id="activity" class="border rounded w-full p-2 mb-2">
          <option value="">Pilih Aktivitas</option>
          <option value="1.2">Sangat ringan</option>
          <option value="1.375">Ringan (1-3x/minggu)</option>
          <option value="1.55">Sedang (3-5x/minggu)</option>
          <option value="1.725">Berat (6-7x/minggu)</option>
          <option value="1.9">Sangat berat</option>
        </select>
        <select id="goal" class="border rounded w-full p-2">
          <option value="">Pilih Tujuan</option>
          <option value="defisit">Defisit (turun berat)</option>
          <option value="maintenance">Stabil</option>
          <option value="surplus">Surplus (naik berat)</option>
        </select>
      </div>

      <button onclick="calculateNeeds()" 
              class="mt-4 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded w-full font-semibold">
        Hitung Kebutuhan Kalori & Protein
      </button>

      <p id="dailyNeed" class="text-center mt-3 font-semibold text-blue-700"></p>
    </section>

    <!-- Input makanan -->
    <section>
      <h2 class="text-lg font-semibold mb-2">üçõ Input Makanan</h2>
      <div class="relative flex gap-2 mb-3">
        <div class="flex-1 relative">
          <input id="foodName" type="text" placeholder="Cari makanan (misal: nasi goreng)" 
                 class="w-full border rounded p-2" oninput="showSuggestions(this.value)">
          <div id="suggestions" class="hidden"></div>
        </div>
        <input id="foodGram" type="number" placeholder="Gram" class="w-24 border rounded p-2">
        <button onclick="addFood()" 
                class="bg-green-600 hover:bg-green-700 text-white px-4 rounded font-semibold">
          +
        </button>
      </div>

      <ul id="foodList" class="space-y-1 text-sm list-disc list-inside"></ul>

      <div class="text-center mt-4">
        <p class="text-lg font-semibold">Total Kalori: 
          <span id="totalCalories" class="text-blue-700">0</span> kcal
        </p>
        <p class="text-lg font-semibold">Total Protein: 
          <span id="totalProtein" class="text-green-700">0</span> g
        </p>
        <p id="status" class="mt-2 text-sm font-semibold"></p>
        <button onclick="resetAll()" 
                class="mt-3 bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded text-sm">
          Reset Semua
        </button>
      </div>
    </section>

    <!-- Grafik progres -->
    <section class="mt-6">
      <h2 class="text-lg font-semibold mb-2">üìä Grafik Progres Kalori</h2>
      <canvas id="calorieChart" height="100"></canvas>
    </section>
  </div>

  <script>
    // üß† Database makanan Indonesia (per 100g)
    const foodDB = {
      "nasi putih": { cal: 130, pro: 2.7 },
      "nasi goreng": { cal: 215, pro: 6 },
      "ayam goreng": { cal: 260, pro: 20 },
      "ayam bakar": { cal: 190, pro: 22 },
      "tempe goreng": { cal: 200, pro: 12 },
      "tahu goreng": { cal: 140, pro: 8 },
      "ikan goreng": { cal: 240, pro: 26 },
      "ikan bakar": { cal: 160, pro: 22 },
      "telur rebus": { cal: 155, pro: 13 },
      "telur dadar": { cal: 190, pro: 11 },
      "roti tawar": { cal: 265, pro: 9 },
      "mie goreng": { cal: 370, pro: 10 },
      "mie rebus": { cal: 150, pro: 4 },
      "bakso": { cal: 230, pro: 14 },
      "sate ayam": { cal: 220, pro: 21 },
      "rendang": { cal: 260, pro: 24 },
      "soto ayam": { cal: 95, pro: 8 },
      "gado-gado": { cal: 150, pro: 7 },
      "sayur asem": { cal: 45, pro: 2 },
      "nasi uduk": { cal: 240, pro: 4 },
      "lontong sayur": { cal: 185, pro: 6 },
      "nasi padang": { cal: 300, pro: 10 },
      "nasi liwet": { cal: 250, pro: 6 },
      "ikan asin": { cal: 300, pro: 35 },
      "udang goreng": { cal: 240, pro: 24 },
      "kepiting": { cal: 120, pro: 20 },
      "ikan tuna": { cal: 132, pro: 28 },
      "tempe bacem": { cal: 180, pro: 9 },
      "perkedel": { cal: 180, pro: 6 },
      "bakwan": { cal: 140, pro: 4 },
      "pisang goreng": { cal: 190, pro: 2 },
      "es teh manis": { cal: 90, pro: 0 },
      "kopi susu": { cal: 110, pro: 2 },
      "jus alpukat": { cal: 160, pro: 3 },
      "jus mangga": { cal: 120, pro: 1 },
      "air putih": { cal: 0, pro: 0 },
      "nasi kuning": { cal: 210, pro: 5 },
      "rawon": { cal: 190, pro: 15 },
      "soto betawi": { cal: 220, pro: 13 },
      "bakmie ayam": { cal: 400, pro: 14 },
      "bubur ayam": { cal: 180, pro: 7 },
      "ketoprak": { cal: 160, pro: 6 },
      "pecel lele": { cal: 240, pro: 22 },
      "sayur lodeh": { cal: 80, pro: 2 },
      "ayam opor": { cal: 230, pro: 18 },
      "nasi campur": { cal: 290, pro: 12 },
      "ikan kembung": { cal: 145, pro: 27 },
      "ikan nila": { cal: 128, pro: 26 },
      "ayam pop": { cal: 170, pro: 21 },
      "roti coklat": { cal: 300, pro: 6 },
      "martabak telur": { cal: 280, pro: 11 },
      "martabak manis": { cal: 370, pro: 6 },
      "mie ayam bakso": { cal: 410, pro: 15 },
      "seblak": { cal: 280, pro: 9 },
      "cilok": { cal: 160, pro: 3 },
      "batagor": { cal: 270, pro: 9 },
      "siomay": { cal: 180, pro: 8 },
      "nasi kebuli": { cal: 320, pro: 10 },
      "burger": { cal: 290, pro: 15 },
      "pizza": { cal: 280, pro: 12 },
      "kentang goreng": { cal: 312, pro: 3 },
      "nugget ayam": { cal: 270, pro: 14 },
      "susu coklat": { cal: 120, pro: 5 },
      "sereal": { cal: 220, pro: 6 },
      "yoghurt": { cal: 70, pro: 4 },
      "kacang tanah": { cal: 567, pro: 26 },
      "kacang mete": { cal: 553, pro: 18 },
      "tempe rebus": { cal: 120, pro: 11 },
      "sayur bening": { cal: 40, pro: 2 },
      "kerupuk": { cal: 200, pro: 1 },
      "telur asin": { cal: 190, pro: 13 },
      "lele goreng": { cal: 260, pro: 22 },
      "bebek goreng": { cal: 280, pro: 24 },
      "daging sapi": { cal: 250, pro: 26 },
      "tumis kangkung": { cal: 80, pro: 3 },
      "tumis tahu tempe": { cal: 140, pro: 10 },
      "tumis buncis": { cal: 60, pro: 3 },
      "sate kambing": { cal: 260, pro: 25 },
      "ikan bandeng": { cal: 150, pro: 22 }
    };

    // Variabel global
    let totalCalories = parseFloat(localStorage.getItem("totalCalories")) || 0;
    let totalProtein = parseFloat(localStorage.getItem("totalProtein")) || 0;
    let dailyNeed = parseFloat(localStorage.getItem("dailyNeed")) || 0;
    let dailyProtein = parseFloat(localStorage.getItem("dailyProtein")) || 0;
    let foodList = JSON.parse(localStorage.getItem("foodList")) || [];
    let calorieHistory = JSON.parse(localStorage.getItem("calorieHistory")) || [];
    let chart;

    const foodListEl = document.getElementById("foodList");
    const totalCalEl = document.getElementById("totalCalories");
    const totalProEl = document.getElementById("totalProtein");
    const statusEl = document.getElementById("status");
    const dailyNeedEl = document.getElementById("dailyNeed");

    // Fungsi pencarian otomatis
    function showSuggestions(query) {
      const suggBox = document.getElementById("suggestions");
      suggBox.innerHTML = "";
      if (!query) { suggBox.classList.add("hidden"); return; }
      const results = Object.keys(foodDB).filter(f => f.includes(query.toLowerCase())).slice(0, 10);
      if (results.length === 0) { suggBox.classList.add("hidden"); return; }
      results.forEach(r => {
        const div = document.createElement("div");
        div.textContent = r;
        div.onclick = () => {
          document.getElementById("foodName").value = r;
          suggBox.classList.add("hidden");
        };
        suggBox.appendChild(div);
      });
      suggBox.classList.remove("hidden");
    }

    // Hitung kebutuhan harian
    function calculateNeeds() {
      const g = val("gender"), a = num("age"), w = num("weight"), h = num("height"),
            act = num("activity"), goal = val("goal");
      if (!g || !a || !w || !h || !act || !goal) return msg("‚ö†Ô∏è Lengkapi semua data pengguna.", "red");

      let bmr = g === "pria"
        ? 88.362 + (13.397 * w) + (4.799 * h) - (5.677 * a)
        : 447.593 + (9.247 * w) + (3.098 * h) - (4.330 * a);

      let tdee = bmr * act;
      if (goal === "defisit") tdee -= 500;
      if (goal === "surplus") tdee += 500;

      dailyNeed = Math.round(tdee);
      dailyProtein = Math.round(w * 1.6);
      localStorage.setItem("dailyNeed", dailyNeed);
      localStorage.setItem("dailyProtein", dailyProtein);
      msg(`Kebutuhan kalori: ${dailyNeed} kcal | Protein: ${dailyProtein}g`, "blue");
      updateStatus();
    }

    function addFood() {
      const name = val("foodName").toLowerCase().trim();
      const gram = num("foodGram");
      if (!name || isNaN(gram) || gram <= 0) return alert("Masukkan nama dan jumlah gram valid!");
      if (!foodDB[name]) return alert("Makanan tidak ada di database!");

      const cal = (foodDB[name].cal / 100) * gram;
      const pro = (foodDB[name].pro / 100) * gram;
      totalCalories += cal;
      totalProtein += pro;
      foodList.push({ name, gram, cal, pro });

      saveData();
      renderFoodList();
      updateStatus();
      updateChart();
      clearInput();
    }

    function renderFoodList() {
      foodListEl.innerHTML = "";
      foodList.forEach(f => {
        const li = document.createElement("li");
        li.textContent = `${capitalize(f.name)} - ${f.gram}g = ${f.cal.toFixed(1)} kcal, ${f.pro.toFixed(1)}g protein`;
        foodListEl.appendChild(li);
      });
      totalCalEl.textContent = totalCalories.toFixed(1);
      totalProEl.textContent = totalProtein.toFixed(1);
    }

    function updateStatus() {
      if (!dailyNeed) return;
      let diff = totalCalories - dailyNeed;
      if (diff < -100) statusEl.textContent = "üî• Masih defisit kalori hari ini.";
      else if (diff > 100) statusEl.textContent = "‚ö†Ô∏è Sudah surplus kalori hari ini.";
      else statusEl.textContent = "‚úÖ Kalori kamu seimbang (maintenance).";
      statusEl.className = "mt-2 text-sm font-semibold " + 
        (diff < -100 ? "text-green-600" : diff > 100 ? "text-red-600" : "text-blue-600");
    }

    function saveData() {
      localStorage.setItem("foodList", JSON.stringify(foodList));
      localStorage.setItem("totalCalories", totalCalories);
      localStorage.setItem("totalProtein", totalProtein);
    }

    function resetAll() {
      if (!confirm("Yakin reset semua data?")) return;
      totalCalories = 0;
      totalProtein = 0;
      dailyNeed = 0;
      foodList = [];
      localStorage.clear();
      renderFoodList();
      updateStatus();
      dailyNeedEl.textContent = "";
      updateChart(true);
    }

    function initChart() {
      const ctx = document.getElementById("calorieChart").getContext("2d");
      const today = new Date().toLocaleDateString();
      const lastEntry = calorieHistory[calorieHistory.length - 1];
      if (!lastEntry || lastEntry.date !== today)
        calorieHistory.push({ date: today, calories: totalCalories });
      chart = new Chart(ctx, {
        type: 'line',
        data: {
